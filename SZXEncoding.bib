%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Simon Perdrix at 2020-08-13 09:58:08 +0200 


%% Saved with string encoding Unicode (UTF-8) 


@misc{CJPV19completenessMix,
	Archiveprefix = {arXiv},
	Author = {Titouan Carette and Emmanuel Jeandel and Simon Perdrix and Renaud Vilmart},
	Eprint = {1902.07143},
	Primaryclass = {quant-ph},
	Title = {Completeness of Graphical Languages for Mixed States Quantum Mechanics},
	Year = {2019},
	doi = {10.1145/3464693},
}



%% lmcs:719
%% https://lmcs.episciences.org/719
%% 
@article{ground,
  TITLE = {{Environment and classical channels in categorical quantum mechanics}},
  AUTHOR = {Coecke, Bob and Perdrix, Simon},
  DOI = {10.2168/LMCS-8(4:14)2012},
  JOURNAL = {{Logical Methods in Computer Science}},
  VOLUME = {{Volume 8, Issue 4}},
  YEAR = {2012},
  MONTH = Nov,
  KEYWORDS = {Quantum Physics ; Computer Science - Logic in Computer Science ; Mathematical Physics ; Mathematics - Category Theory ; F.1.1, F.3.2},
}


@misc{vdw_working_cs_zx,
  doi = {10.48550/ARXIV.2012.13966},
  author = {van de Wetering, John},
  keywords = {Quantum Physics (quant-ph), FOS: Physical sciences, FOS: Physical sciences},
  title = {ZX-calculus for the working quantum computer scientist},
  publisher = {arXiv},
  year = {2020},
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@misc{DKPW2019qcircSimpl,
	Archiveprefix = {arXiv},
	Author = {Ross Duncan and Aleks Kissinger and Simon Perdrix and John van de Wetering},
	Eprint = {1902.03178},
	Primaryclass = {quant-ph},
	Title = {Graph-theoretic Simplification of Quantum Circuits with the ZX-calculus},
	Year = {2019},
	doi = {10.22331/q-2020-06-04-279},
}

@article{Selinger07DCClosCat,
	Abstract = {Dagger compact closed categories were recently introduced by Abramsky and Coecke, under the name ``strongly compact closed categories'', as an axiomatic framework for quantum mechanics. We present a graphical language for dagger compact closed categories, and sketch a proof of its completeness for equational reasoning. We give a general construction, the CPM construction, which associates to each dagger compact closed category its ``category of completely positive maps'', and we show that the resulting category is again dagger compact closed. We apply these ideas to Abramsky and Coecke's interpretation of quantum protocols, and to D'Hondt and Panangaden's predicate transformer semantics.},
	Author = {Peter Selinger},
	Doi = {https://doi.org/10.1016/j.entcs.2006.12.018},
	Issn = {1571-0661},
	Journal = {Electronic Notes in Theoretical Computer Science},
	Keywords = {Categorical model, quantum computing, dagger categories, CPM construction},
	Note = {Proceedings of the 3rd International Workshop on Quantum Programming Languages (QPL 2005)},
	Pages = {139 - 163},
	Title = {Dagger Compact Closed Categories and Completely Positive Maps: (Extended Abstract)},
	Volume = {170},
	Year = {2007},
}

@misc{nguyen2019average,
	Archiveprefix = {arXiv},
	Author = {Huy-Tung Nguyen and Sang-il Oum},
	Eprint = {1906.02895},
	Primaryclass = {math.CO},
	Title = {The average cut-rank of graphs},
	Year = {2019}}

@misc{cross2017openQASM,
	Archiveprefix = {arXiv},
	Author = {Andrew W. Cross and Lev S. Bishop and John A. Smolin and Jay M. Gambetta},
	Eprint = {1707.03429},
	Primaryclass = {quant-ph},
	Title = {Open Quantum Assembly Language},
	Year = {2017}}

@misc{khammassi2018cQASM,
	Archiveprefix = {arXiv},
	Author = {N. Khammassi and G. G. Guerreschi and I. Ashraf and J. W. Hogaboam and C. G. Almudever and K. Bertels},
	Eprint = {1805.09607},
	Primaryclass = {quant-ph},
	Title = {cQASM v1.0: Towards a Common Quantum Assembly Language},
	Year = {2018}}

@article{Steiger2018projectQ,
	Author = {Steiger, Damian S. and H{\"a}ner, Thomas and Troyer, Matthias},
	Doi = {10.22331/q-2018-01-31-49},
	Issn = {2521-327X},
	Journal = {Quantum},
	Month = {Jan},
	Pages = {49},
	Publisher = {Verein zur Forderung des Open Access Publizierens in den Quantenwissenschaften},
	Title = {ProjectQ: an open source software framework for quantum computing},
	Volume = {2},
	Year = {2018},
}

@article{Green2013quipper,
	Author = {Green, Alexander S. and Lumsdaine, Peter LeFanu and Ross, Neil J. and Selinger, Peter and Valiron, Beno{\^\i}t},
	Doi = {10.1145/2499370.2462177},
	Issn = {0362-1340},
	Journal = {ACM SIGPLAN Notices},
	Month = {Jun},
	Number = {6},
	Pages = {333},
	Publisher = {Association for Computing Machinery (ACM)},
	Title = {Quipper: a scalable quantum programming language},
	Volume = {48},
	Year = {2013},
}

@article{fu_tutorial_2020,
	title = {A tutorial introduction to quantum circuit programming in dependently typed {Proto}-{Quipper}},
	abstract = {We introduce dependently typed Proto-Quipper, or Proto-Quipper-D for short, an experimental quantum circuit programming language with linear dependent types. We give several examples to illustrate how linear dependent types can help in the construction of correct quantum circuits. SpeciÔ¨Åcally, we show how dependent types enable programming families of circuits, and how dependent types solve the problem of type-safe uncomputation of garbage qubits. We also discuss other language features along the way.},
	language = {en},
	journal = {arXiv:2005.08396 [quant-ph]},
	author = {Fu, Peng and Kishida, Kohei and Ross, Neil J. and Selinger, Peter},
	month = dec,
	year = {2020},
	note = {arXiv: 2005.08396},
	keywords = {Quantum Physics, Computer Science - Programming Languages},
	doi = {10.1007/978-3-030-52482-1\_9},	
}


@article{Cattan_Perdrix_2015,
	Author = {Cattan{\'e}o, David and Perdrix, Simon},
	Doi = {10.1007/978-3-662-48971-0\_23},
	Isbn = {9783662489710},
	Issn = {1611-3349},
	Journal = {Lecture Notes in Computer Science},
	Pages = {259--270},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Minimum Degree Up to Local Complementation: Bounds, Parameterized Complexity, and Exact Algorithms},
	Year = {2015},
}

@article{de_Beaudrap_2008,
	Author = {de Beaudrap, Niel},
	Doi = {10.1103/physreva.77.022328},
	Issn = {1094-1622},
	Journal = {Physical Review A},
	Month = {Feb},
	Number = {2},
	Publisher = {American Physical Society (APS)},
	Title = {Finding flows in the one-way measurement model},
	Volume = {77},
	Year = {2008},
}

@misc{beaudrap2007extremal,
	Archiveprefix = {arXiv},
	Author = {Niel de Beaudrap and Martin Pei},
	Eprint = {quant-ph/0702229},
	Primaryclass = {quant-ph},
	Title = {An extremal result for geometries in the one-way measurement model},
	Year = {2007}}

@article{Vilmart_2019,
	Author = {Vilmart, Renaud},
	Doi = {10.4204/eptcs.287.18},
	Issn = {2075-2180},
	Journal = {Electronic Proceedings in Theoretical Computer Science},
	Month = {Jan},
	Pages = {313--344},
	Publisher = {Open Publishing Association},
	Title = {A ZX-Calculus with Triangles for Toffoli-Hadamard, Clifford+T, and Beyond},
	Volume = {287},
	Year = {2019},
}

@misc{backens2020circuit,
	Archiveprefix = {arXiv},
	Author = {Miriam Backens and Hector Miller-Bakewell and Giovanni de Felice and Leo Lobski and John van de Wetering},
	Eprint = {2003.01664},
	Primaryclass = {quant-ph},
	Title = {There and back again: A circuit extraction tale},
	Year = {2020}}

@incollection{mhallaWhichGraphStates2014,
	Address = {{Berlin, Heidelberg}},
	Author = {Mhalla, Mehdi and Murao, Mio and Perdrix, Simon and Someya, Masato and Turner, Peter S.},
	Booktitle = {Theory of {{Quantum Computation}}, {{Communication}}, and {{Cryptography}}},
	Doi = {10.1007/978-3-642-54429-3_12},
	Isbn = {978-3-642-54428-6 978-3-642-54429-3},
	Language = {en},
	Pages = {174--187},
	Publisher = {{Springer Berlin Heidelberg}},
	Title = {Which {{Graph States}} Are {{Useful}} for {{Quantum Information Processing}}?},
	Volume = {6745},
	Year = {2014},
}

@book{bob_coeke_aleks_kissinger_picturing_2017,
	Author = {Bob Coeke and Aleks Kissinger},
	Publisher = {Cambridge University Press},
	Title = {Picturing {Quantum} processes - {A} diagrammatic approach},
	Year = {2017}}

@article{jeandel_completeness_2019,
	Abstract = {The ZX-Calculus is a graphical language for diagrammatic reasoning in quantum mechanics and quantum information theory. It comes equipped with an equational presentation. We focus here on a very important property of the language: completeness, which roughly ensures the equational theory captures all of quantum mechanics. We first improve on the known-to-be-complete presentation for the so-called Clifford fragment of the language -- a restriction that is not universal -- by adding some axioms. Thanks to a system of back-and-forth translation between the ZX-Calculus and a third-party complete graphical language, we prove that the provided axiomatisation is complete for the first approximately universal fragment of the language, namely Clifford+T.},
	Author = {Emmanuel Jeandel and Simon Perdrix and Renaud Vilmart},
	Journal = {arXiv:1903.06035 [quant-ph]},
	Keywords = {Quantum Physics, Computer Science - Logic in Computer Science},
	Language = {en},
	Month = oct,
	Note = {arXiv: 1903.06035},
	Title = {Completeness of the {ZX}-{Calculus}},
	Year = {2019},
}

@article{amy_polynomial-time_2014,
	Abstract = {Most work in quantum circuit optimization has been performed in isolation from the results of quantum fault-tolerance. Here we present a polynomial-time algorithm for optimizing quantum circuits that takes the actual implementation of fault-tolerant logical gates into consideration. Our algorithm re-synthesizes quantum circuits composed of Clifford group and T gates, the latter being typically the most costly gate in fault-tolerant models, e.g., those based on the Steane or surface codes, with the purpose of minimizing both T -count and T -depth. A major feature of the algorithm is the ability to re-synthesize circuits with additional ancillae to reduce T -depth at effectively no cost. The tested benchmarks show up to 65.7\% reduction in T -count and up to 87.6\% reduction in T -depth without ancillae, or 99.7\% reduction in T -depth using ancillae.},
	Author = {Amy, Matthew and Maslov, Dmitri and Mosca, Michele},
	Doi = {10.1109/TCAD.2014.2341953},
	Issn = {0278-0070, 1937-4151},
	Journal = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
	Keywords = {Quantum Physics, Computer Science - Emerging Technologies},
	Language = {en},
	Month = oct,
	Note = {arXiv: 1303.2042},
	Number = {10},
	Pages = {1476--1489},
	Title = {Polynomial-time {T}-depth {Optimization} of {Clifford}+{T} circuits via {Matroid} {Partitioning}},
	Volume = {33},
	Year = {2014},
}

@article{heyfron_efficient_2018,
	Abstract = {Before executing a quantum algorithm, one must first decompose the algorithm into machine-level instructions compatible with the architecture of the quantum computer, a process known as quantum compiling. There are many different quantum circuit decompositions for the same algorithm but it is desirable to compile leaner circuits. A fundamentally important cost metric is the \$T\$ count -- the number of \$T\$ gates in a circuit. For the single qubit case, optimal compiling is essentially a solved problem. However, multi-qubit compiling is a harder problem with optimal algorithms requiring classical runtime exponential in the number of qubits. Here, we present and compare several efficient quantum compilers for multi-qubit Clifford + \$T\$ circuits. We implemented our compilers in C++ and benchmarked them on random circuits, from which we determine that our TODD compiler yields the lowest \$T\$ counts on average. We also benchmarked TODD on a library of reversible logic circuits that appear in quantum algorithms and found that it reduced the \$T\$ count for 97{\textbackslash}\% of the circuits with an average \$T\$-count saving of 20{\textbackslash}\% when compared against the best of all previous circuit decompositions.},
	Author = {Heyfron, Luke and Campbell, Earl T.},
	Journal = {arXiv:1712.01557 [quant-ph]},
	Keywords = {Quantum Physics},
	Language = {en},
	Month = jun,
	Note = {arXiv: 1712.01557},
	Title = {An {Efficient} {Quantum} {Compiler} that reduces {T} count},
	Year = {2018},
}

@article{kissinger_pyzx_2020,
	Abstract = {The ZX-calculus is a graphical language for reasoning about ZX-diagrams, a type of tensor networks that can represent arbitrary linear maps between qubits. Using the ZX-calculus, we can intuitively reason about quantum theory, and optimise and validate quantum circuits. In this paper we introduce PyZX, an open source library for automated reasoning with large ZX-diagrams. We give a brief introduction to the ZX-calculus, then show how PyZX implements methods for circuit optimisation, equality validation, and visualisation and how it can be used in tandem with other software. We end with a set of challenges that when solved would enhance the utility of automated diagrammatic reasoning.},
	Author = {Kissinger, Aleks and van de Wetering, John},
	Doi = {10.4204/EPTCS.318.14},
	Issn = {2075-2180},
	Journal = {Electronic Proceedings in Theoretical Computer Science},
	Keywords = {Quantum Physics},
	Month = may,
	Note = {arXiv: 1904.04735},
	Pages = {229--241},
	Shorttitle = {{PyZX}},
	Title = {{PyZX}: {Large} {Scale} {Automated} {Diagrammatic} {Reasoning}},
	Volume = {318},
	Year = {2020},
}

@article{aleks_kissinger_reducing_2020,
	title = {Reducing {T}-count with the {ZX}-calculus},
	abstract = {Reducing the number of non-CliÔ¨Äord quantum gates present in a circuit is an important task for eÔ¨Éciently implementing quantum computations, especially in the fault-tolerant regime. We present a new method for reducing the number of T-gates in a quantum circuit based on the ZX-calculus, which matches or beats previous approaches to T-count reduction on the majority of our benchmark circuits in the ancilla-free case, in some cases yielding up to 50\% improvement. Our method begins by representing the quantum circuit as a ZX-diagram, a tensor network-like structure that can be transformed and simpliÔ¨Åed according to the rules of the ZX-calculus. We then show that a recently-proposed simpliÔ¨Åcation strategy can be extended to reduce T-count using a new technique called phase teleportation. This technique allows nonCliÔ¨Äord phases to combine and cancel by propagating non-locally through a generic quantum circuit. Phase teleportation does not change the number or location of non-phase gates and the method also applies to arbitrary non-CliÔ¨Äord phase gates as well as gates with unknown phase parameters in parametrised circuits. Furthermore, the simpliÔ¨Åcation strategy we use is powerful enough to validate equality of many circuits. In particular, we use it to show that our optimised circuits are indeed equal to the original ones. We have implemented the routines of this paper in the open-source library PyZX.},
	language = {en},
	journal = {arXiv:1903.10477 [quant-ph]},
	author = {Kissinger, Aleks and van de Wetering, John},
	month = jan,
	year = {2020},
	note = {arXiv: 1903.10477},
	keywords = {Quantum Physics},
	annote = {Comment: 15 pages + references},
}

@inproceedings{coecke_interacting_2008,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Interacting {Quantum} {Observables}},
	isbn = {978-3-540-70583-3},
	doi = {10.1007/978-3-540-70583-3_25},
	abstract = {We formalise the constructive content of an essential feature of quantum mechanics: the interaction of complementary quantum observables, and information flow mediated by them. Using a general categorical formulation, we show that pairs of mutually unbiased quantum observables form bialgebra-like structures. We also provide an abstract account on the quantum data encoded in complex phases, and prove a normal form theorem for it. Together these enable us to describe all observables of finite dimensional Hilbert space quantum mechanics. The resulting equations suffice to perform computations with elementary quantum gates, translate between distinct quantum computational models, establish the equivalence of entangled quantum states, and simulate quantum algorithms such as the quantum Fourier transform. All these computations moreover happen within an intuitive diagrammatic calculus.},
	language = {en},
	booktitle = {Automata, {Languages} and {Programming}},
	publisher = {Springer},
	author = {Coecke, Bob and Duncan, Ross},
	year = {2008},
	keywords = {Bloch Sphere, Classical Point, Classical Structure, Monoidal Structure, Quantum Observable},
	pages = {298--310},
}

@article{duncan_verifying_2014,
	title = {Verifying the {Steane} code with {Quantomatic}},
	volume = {171},
	issn = {2075-2180},
	doi = {10.4204/EPTCS.171.4},
	abstract = {In this paper we give a partially mechanized proof of the correctness of Steane's 7-qubit error correcting code, using the tool Quantomatic. To the best of our knowledge, this represents the largest and most complicated verification task yet carried out using Quantomatic.},
	journal = {Electronic Proceedings in Theoretical Computer Science},
	author = {Duncan, Ross and Lucas, Maxime},
	month = dec,
	year = {2014},
	note = {arXiv: 1306.4532},
	keywords = {Computer Science - Artificial Intelligence, Computer Science - Logic in Computer Science, F.3.1, Quantum Physics},
	pages = {33--49},
	annote = {Comment: In Proceedings QPL 2013, arXiv:1412.7917}
}

@article{de_beaudrap_zx_2020,
	title = {The {ZX} calculus is a language for surface code lattice surgery},
	volume = {4},
	issn = {2521-327X},
	doi = {10.22331/q-2020-01-09-218},
	abstract = {A leading choice of error correction for scalable quantum computing is the surface code with lattice surgery. The basic lattice surgery operations, the merging and splitting of logical qubits, act non-unitarily on the logical states and are not easily captured by standard circuit notation. This raises the question of how best to design, verify, and optimise protocols that use lattice surgery, in particular in architectures with complex resource management issues. In this paper we demonstrate that the operations of the ZX calculus --- a form of quantum diagrammatic reasoning based on bialgebras --- match exactly the operations of lattice surgery. Red and green "spider" nodes match rough and smooth merges and splits, and follow the axioms of a dagger special associative Frobenius algebra. Some lattice surgery operations require non-trivial correction operations, which are captured natively in the use of the ZX calculus in the form of ensembles of diagrams. We give a first taste of the power of the calculus as a language for lattice surgery by considering two operations (T gates and producing a CNOT ) and show how ZX diagram re-write rules give lattice surgery procedures for these operations that are novel, efficient, and highly configurable.},
	language = {en},
	journal = {Quantum},
	author = {de Beaudrap, Niel and Horsman, Dominic},
	month = jan,
	year = {2020},
	note = {tex.ids: debeaudrapZXCalculusLanguage2020a
arXiv: 1704.08670},
	keywords = {Quantum Physics, Computer Science - Logic in Computer Science},
	pages = {218},
	annote = {Comment: 20 pages, many figures. Minor revisions. Accepted to Quantum Journal},
	annote = {Comment: 20 pages, many figures. Minor revisions. Accepted to Quantum Journal}
}

@article{miller-bakewell_finite_2020,
	title = {Finite {Verification} of {Infinite} {Families} of {Diagram} {Equations}},
	volume = {318},
	issn = {2075-2180},
	doi = {10.4204/EPTCS.318.3},
	abstract = {The ZX, ZW and ZH calculi are all graphical calculi for reasoning about pure state qubit quantum mechanics. All of these languages use certain diagrammatic decorations, called !-boxes and phase variables, to indicate not just one diagram but an infinite family of diagrams. These decorations are powerful enough to allow complete rulesets for these calculi to be expressed in around fifteen rules. Historically rules involving !-boxes have not been verifiable by computer. We present the first algorithm for reducing infinite families of equations involving !-boxes into finite verifying subsets. The only requirement for this method is a mild property on the connectivity of the !-boxes. Previous results had focussed on finite case analysis of phase variables in ZX, a result we also extend for ZW and ZH, as well as providing a general framework for further languages. The results presented here allow proof assistants to reduce infinite families of problems (involving combinations of phase variables and !-boxes) down to undecorated, case-by-case verification, in a way not previously possible. In particular we note the removal of the need to reason directly with !-boxes in verification tasks as something entirely new. This forms part of larger work in automated verification of quantum circuitry, conjecture synthesis, and diagrammatic languages in general. The methods described here extend to any diagrammatic languages that meet certain simple conditions.},
	journal = {Electronic Proceedings in Theoretical Computer Science},
	author = {Miller-Bakewell, Hector},
	month = may,
	year = {2020},
	note = {arXiv: 1904.00706
version: 2},
	keywords = {Quantum Physics},
	pages = {27--52}
}

@article{carette_szx-calculus_2019,
	title = {{SZX}-calculus: {Scalable} {Graphical} {Quantum} {Reasoning}},
	shorttitle = {{SZX}-calculus},
	doi = {10.4230/LIPIcs.MFCS.2019.55},
	abstract = {We introduce the Scalable ZX-calculus (SZX-calculus for short), a formal and compact graphical language for the design and verification of quantum computations. The SZX-calculus is an extension of the ZX-calculus, a powerful framework that captures graphically the fundamental properties of quantum mechanics through its complete set of rewrite rules. The ZX-calculus is, however, a low level language, with each wire representing a single qubit. This limits its ability to handle large and elaborate quantum evolutions. We extend the ZX-calculus to registers of qubits and allow compact representation of sub-diagrams via binary matrices. We show soundness and completeness of the SZX-calculus and provide two examples of applications, for graph states and error correcting codes.},
	journal = {arXiv:1905.00041 [quant-ph]},
	author = {Carette, Titouan and Horsman, Dominic and Perdrix, Simon},
	year = {2019},
	note = {arXiv: 1905.00041},
	keywords = {Quantum Physics},
	pages = {15 pages}
}

@article{carette_note_2020,
	title = {A note on diagonal gates in {SZX}-calculus},
	abstract = {This note describes how the the scalable ZXH calculus can be used to represent in a compact way the quantum gates that are diagonal in the computational basis. This includes controlled and multi-controlled Z gates, their generalizations, respectively graph and hypergraph operators, and also phase gadgets.},
	language = {en},
	journal = {arXiv:2012.09540 [quant-ph]},
	author = {Carette, Titouan},
	month = dec,
	year = {2020},
	note = {arXiv: 2012.09540},
	keywords = {Quantum Physics}
}

@article{carette_quantum_2021,
	title = {Quantum {Algorithms} and {Oracles} with the {Scalable} {ZX}-calculus},
	volume = {343},
	issn = {2075-2180},
	doi = {10.4204/EPTCS.343.10},
	language = {en},
	journal = {Electronic Proceedings in Theoretical Computer Science},
	author = {Carette, Titouan and D'Anello, Yohann and Perdrix, Simon},
	month = sep,
	year = {2021},
	pages = {193--209}
}

@article{carette_colored_2020,
	title = {Colored props for large scale graphical reasoning},
	abstract = {The prop formalism allows representation of processes with string diagrams and has been successfully applied in various areas such as quantum computing, electric circuits and control Ô¨Çow graphs. However, these graphical approaches suÔ¨Äer from scalability problems when it comes to writing large diagrams. A proposal to tackle this issue has been investigated for ZX-calculus using colored props. This paper extends the approach to any prop, making it a general tool for graphical languages manipulation.},
	language = {en},
	journal = {arXiv:2007.03564 [quant-ph]},
	author = {Carette, Titouan and Perdrix, Simon},
	month = jul,
	year = {2020},
	note = {arXiv: 2007.03564},
	keywords = {Quantum Physics, Computer Science - Logic in Computer Science}
}

@article{chancellor_graphical_2018,
	title = {Graphical {Structures} for {Design} and {Verification} of {Quantum} {Error} {Correction}},
	abstract = {We introduce a high-level graphical framework for the design, analysis, and verification of quantum error correcting codes. The coherent parity check construction for stabilizer codes allows us to construct a broad range of quantum codes based on classical codes, and gives a framework in which large classes of such codes can be both analytically and numerically discovered. Using graphical tools based on the {\textbackslash}zx calculus, we explicitly construct small distance 3 and 5 codes with high code rates using this framework. We also show how this framework can be used to represent CSS codes and conversely how to compute stabilisers for a CPC code. We give a construction turns (almost) any pair of classical [n,k,3] codes into a [[2n - k + 2, k, 3]] CPC code, and give a straightforward technique for machine search which yields thousands of potential codes, and demonstrate its operation for distance 3 and 5 codes. Finally we use the graphical tools we introduce to demonstrate how Clifford computation can be performed within CPC codes.},
	journal = {arXiv:1611.08012 [quant-ph]},
	author = {Chancellor, Nicholas and Kissinger, Aleks and Roffe, Joschka and Zohren, Stefan and Horsman, Dominic},
	month = jan,
	year = {2018},
	note = {arXiv: 1611.08012},
	keywords = {Quantum Physics}
}

@article{carette_streams_2021,
	title = {Graphical {Language} with {Delayed} {Trace}: {Picturing} {Quantum} {Computing} with {Finite} {Memory}},
	shorttitle = {Graphical {Language} with {Delayed} {Trace}},
	abstract = {Graphical languages, like quantum circuits or ZX-calculus, have been successfully designed to represent (memoryless) quantum computations acting on a finite number of qubits. Meanwhile, delayed traces have been used as a graphical way to represent finite-memory computations on streams, in a classical setting (cartesian data types). We merge those two approaches and describe a general construction that extends any graphical language, equipped with a notion of discarding, to a graphical language of finite memory computations. In order to handle cases like the ZX-calculus, which is complete for post-selected quantum mechanics, we extend the delayed trace formalism beyond the causal case, refining the notion of causality for stream transformers. We design a stream semantics based on stateful morphism sequences and, under some assumptions, show universality and completeness results. Finally, we investigate the links of our framework with previous works on cartesian data types, signal flow graphs, and quantum channels with memories.},
	language = {en},
	journal = {arXiv:2102.03133 [quant-ph]},
	author = {Carette, Titouan and de Visme, Marc and Perdrix, Simon},
	month = apr,
	year = {2021},
	note = {arXiv: 2102.03133},
	keywords = {Quantum Physics}
}

@article{pagani_applying_2013,
	title = {Applying quantitative semantics to higher-order quantum computing},
	abstract = {Finding a denotational semantics for higher order quantum computation is a long-standing problem in the semantics of quantum programming languages. Most past approaches to this problem fell short in one way or another, either limiting the language to an unusably small Ô¨Ånitary fragment, or giving up important features of quantum physics such as entanglement. In this paper, we propose a denotational semantics for a quantum lambda calculus with recursion and an inÔ¨Ånite data type, using constructions from quantitative semantics of linear logic.},
	language = {en},
	journal = {arXiv:1311.2290 [quant-ph]},
	author = {Pagani, Michele and Selinger, Peter and Valiron, Beno√Æt},
	month = nov,
	year = {2013},
	note = {tex.ids: paganiApplyingQuantitativeSemantics2014
arXiv: 1311.2290
tex.publisher: ACM},
	keywords = {Quantum Physics, Computer Science - Logic in Computer Science, Computer Science - Programming Languages}
}

@article{pagani_some_advances_2013,
	title = {Some Advances in Linear Logic},
	language = {en},
	author = {Pagani, Michele},
	month = dec,
	journal = {M√©moire pour l‚Äôobtention de l‚Äôhabilitation √† diriger les recherches},
	year = {2013},
}

@incollection{hutchison_functorial_2006,
	address = {Berlin, Heidelberg},
	title = {Functorial {Boxes} in {String} {Diagrams}},
	volume = {4207},
	isbn = {978-3-540-45458-8 978-3-540-45459-5},
	abstract = {String diagrams were introduced by Roger Penrose as a handy notation to manipulate morphisms in a monoidal category. In principle, this graphical notation should encompass the various pictorial systems introduced in proof-theory (like Jean-Yves Girard‚Äôs proof-nets) and in concurrency theory (like Robin Milner‚Äôs bigraphs). This is not the case however, at least because string diagrams do not accomodate boxes ‚Äî a key ingredient in these pictorial systems. In this short tutorial, based on our accidental rediscovery of an idea by Robin Cockett and Robert Seely, we explain how string diagrams may be extended with a notion of functorial box to depict a functor separating an inside world (its source category) from an outside world (its target category). We expose two elementary applications of the notation: Ô¨Årst, we characterize graphically when a faithful balanced monoidal functor F : C ‚àí‚Üí D transports a trace operator from the category D to the category C, and we then exploit this to construct well-behaved Ô¨Åxpoint operators in cartesian closed categories generated by models of linear logic; second, we explain how the categorical semantics of linear logic induces that the exponential box of proof-nets decomposes as two enshrined functorial boxes.},
	language = {en},
	booktitle = {Computer {Science} {Logic}},
	publisher = {Springer Berlin Heidelberg},
	author = {Melli√®s, Paul-Andr√©},
	year = {2006},
	doi = {10.1007/11874683_1},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {1--30}
}

@article{alvarez-picallo_functorial_2021,
	title = {Functorial {String} {Diagrams} for {Reverse}-{Mode} {Automatic} {Differentiation}},
	abstract = {We enhance the calculus of string diagrams for monoidal categories with hierarchical features in order to capture closed monoidal (and cartesian closed) structure. Using this new syntax we formulate an automatic differentiation algorithm for (applied) simply typed lambda calculus in the style of [Pearlmutter and Siskind 2008] and we prove for the first time its soundness. To give an efficient yet principled implementation of the AD algorithm we define a sound and complete representation of hierarchical string diagrams as a class of hierarchical hypergraphs we call hypernets.},
	language = {en},
	journal = {arXiv:2107.13433 [cs]},
	author = {Alvarez-Picallo, Mario and Ghica, Dan R. and Sprunger, David and Zanasi, Fabio},
	month = jul,
	year = {2021},
	note = {arXiv: 2107.13433},
	keywords = {Computer Science - Programming Languages, Computer Science - Machine Learning, I.2.5}
}
@article{selinger_2004, 
	title={Towards a quantum programming language}, 
	volume={14}, 
	DOI={10.1017/S0960129504004256}, 
	number={4}, 
	journal={Mathematical Structures in Computer Science}, 
	publisher={Cambridge University Press}, 
	author={SELINGER, PETER}, 
	year={2004}, 
	pages={527‚Äì586}
}

@book{nielsen_chuang_quantum_programming,
  Author = {Michael A. Nielsen and Isaac L. Chuang},
  Title = {Quantum Computation and Quantum Information: 10th Anniversary Edition},
  Publisher = {Cambridge University Press},
  Year = {2011},
  ISBN = {9781107002173},
  doi = {10.1017/cbo9780511976667},
} 

 
@inproceedings{borgna_hybrid_2021,
	address = {Cham},
	title = {Hybrid {Quantum}-{Classical} {Circuit} {Simplification} with the {ZX}-{Calculus}},
	copyright = {All rights reserved},
	isbn = {978-3-030-89051-3},
	abstract = {We present a complete optimization procedure for hybrid quantum-classical circuits with classical parity logic. While common optimization techniques for quantum algorithms focus on rewriting solely the pure quantum segments, there is interest in applying a global optimization process for applications such as quantum error correction and quantum assertions. This work, based on the pure-quantum circuit optimization procedure by Duncan et al., uses an extension of the formal graphical ZX-calculus called as an intermediary representation of the hybrid circuits to allow for granular optimizations below the quantum-gate level. We define a translation from hybrid circuits into diagrams that admit the graph-theoretical focused-gFlow property, needed for the final extraction back into a circuit. We then derive a number of gFlow-preserving optimization rules for diagrams that reduce the size of the graph, and devise a strategy to find optimization opportunities by rewriting the diagram guided by a Gauss elimination process. Then, after extracting the circuit, we present a general procedure for detecting segments of circuit-like diagrams which can be implemented with classical gates in the extracted circuit. We have implemented our optimization procedure as an extension to the open-source python library PyZX.},
	booktitle = {Programming {Languages} and {Systems}},
	publisher = {Springer International Publishing},
	author = {Borgna, Agust√≠n and Perdrix, Simon and Valiron, Beno√Æt},
	editor = {Oh, Hakjoo},
	year = {2021},
	pages = {121--139},
	doi = {10.1007/978-3-030-89051-3\_8},
}

@misc{qiskit, 
	author = {MD SAJID ANIS et al.}, 
	title = {Qiskit: An Open-source Framework for Quantum Computing}, 
	year = {2021}, 
	doi = {10.5281/zenodo.2562111},
} 

@misc{cirq,
  author       = {Cirq Developers},
  title        = {Cirq},
  month        = aug,
  year         = 2021,
  note         = {{See full list of authors on Github: https://github 
                   .com/quantumlib/Cirq/graphs/contributors}},
  publisher    = {Zenodo},
  version      = {v0.12.0},
  doi          = {10.5281/zenodo.5182845},
}

@article{Backens_2019,
	doi = {10.4204/eptcs.287.2},
	year = 2019,
	month = {jan},
	publisher = {Open Publishing Association},
	volume = {287},
	pages = {23--42},
	author = {Miriam Backens and Aleks Kissinger},
	title = {{ZH}: A Complete Graphical Calculus for Quantum Computations Involving Classical Non-linearity},
	journal = {Electronic Proceedings in Theoretical Computer Science}
}

@article{fu_linear_2021,
	title = {Linear {Dependent} {Type} {Theory} for {Quantum} {Programming} {Languages}},
	abstract = {Modern quantum programming languages integrate quantum resources and classical control. They must, on the one hand, be linearly typed to reÔ¨Çect the no-cloning property of quantum resources. On the other hand, high-level and practical languages should also support quantum circuits as Ô¨Årst-class citizens, as well as families of circuits that are indexed by some classical parameters. Quantum programming languages thus need linear dependent type theory. This paper deÔ¨Ånes a general semantic structure for such a type theory via certain Ô¨Åbrations of monoidal categories. The categorical model of the quantum circuit description language Proto-Quipper-M in [RS17] constitutes an example of such a Ô¨Åbration, which means that the language can readily be integrated with dependent types. We then devise both a general linear dependent type system and a dependently typed extension of Proto-Quipper-M, and provide them with operational semantics as well as a prototype implementation.},
	language = {en},
	journal = {arXiv:2004.13472 [quant-ph]},
	author = {Fu, Peng and Kishida, Kohei and Selinger, Peter},
	month = dec,
	year = {2021},
	note = {arXiv: 2004.13472},
	keywords = {Quantum Physics, Computer Science - Logic in Computer Science, Computer Science - Programming Languages, Mathematics - Category Theory},
	doi = {10.46298/lmcs-18(3:28)2022},
}

@article{Cervesato1996ALL,
  title={A linear logical framework},
  author={Iliano Cervesato and Frank Pfenning},
  journal={Proceedings 11th Annual IEEE Symposium on Logic in Computer Science},
  year={1996},
  pages={264-275},
  doi = {10.1109/lics.1996.561339},
}

@article{Backens_2021,
	doi = {10.22331/q-2021-03-25-421},
	url = {https://doi.org/10.22331%2Fq-2021-03-25-421},
	year = 2021,
	month = {mar},
	publisher = {Verein zur Forderung des Open Access Publizierens in den Quantenwissenschaften},
	volume = {5},
	pages = {421},
	author = {Miriam Backens and Hector Miller-Bakewell and Giovanni de Felice and Leo Lobski and John van de Wetering},
	title = {There and back again: A circuit extraction tale},
	journal = {Quantum}
}
