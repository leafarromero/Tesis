module Qft where
import "lib/Prelude.dpq"

-- rotate : ! forall (y : Nat) -> Qubit -> Nat -> Vec Qubit y -> Vec Qubit y * Qubit
-- rotate q buff qs = 
--         case qs of
--            VNil -> (VNil, q)
--            VCons q' qs' -> 
--              let (n, qs'') = length qs'
--                  (r, c) = rotate q buff qs''
--                  m = minus (S buff) n
--                  (q'' , c') = R m q' c
--    	     in (VCons q'' r , c')	       	    

-- qft_aux : ! forall (n : Nat) -> Vec Qubit n -> Vec Qubit n
-- qft_aux l = case l of
--                  VNil -> VNil 
--                  VCons q qs ->
-- 	           let (m, qs') = length qs
--                        (qs'', q') = rotate q m (qft_aux qs') in
-- 		   VCons (H q') qs''
rotate : ! forall (y : Nat) -> Nat -> Qubit -> Vec Qubit y -> Qubit * Vec Qubit y
rotate m q v =
    case v of
      VNil -> (q, VNil)
      VCons x xs ->
        let (q', x') = R m q x
            (q'', xs') = rotate (S m) q' xs
        in (q'', VCons x' xs')

oneRotation : ! (n : Nat) -> Circ(Qubit * Vec Qubit n, Qubit * Vec Qubit n)
oneRotation n =
  box (Qubit * Vec Qubit n) 
    (Î» x ->
       let (q, v) = x in rotate (S (S Z)) (H q) v)
                     
qft : ! forall (n : Nat) -> Vec Qubit n -> Vec Qubit n
qft v =
  case v of
    VNil -> VNil
    VCons q qs ->
      let q' = H q
          (q'', qs') = rotate (S (S Z)) q' qs
          qs'' = qft qs'
      in VCons q'' qs''

-- big-headian QFT: the highest-order bit is at the head of the list->
-- qft : !  (n : Nat) -> Vec Qubit n -> Vec Qubit n
-- qft n l = reverse_vec (qft_aux l)


-- test1 : Vec Qubit four
-- test1 = qft four (VCons (Init0 ()) (VCons (Init0 ()) (VCons (Init0 ()) (VCons (Init0 ()) VNil))))

qftTwice : ! (n : Nat) -> Vec Qubit n -> Vec Qubit n
qftTwice n l = qft (qft l)


qftBox : ! (n : Nat) -> Circ(Vec Qubit n, Vec Qubit n) 
qftBox n = box (Vec Qubit n) (\ x -> qft x)

qft4 : Circ(Vec Qubit four, Vec Qubit four) 
qft4 = qftBox four


-- qftBox_t1 = qftBox nine

-- qftBox_t2 = qftBox (nine + nine)

qftUnbox : ! (n : Nat) -> Vec Qubit n -> Vec Qubit n
qftUnbox n = unbox $ qftBox n

qft2Box : ! (n : Nat) -> Circ(Vec Qubit n, Vec Qubit n) 
qft2Box n = box (Vec Qubit n) $ \ x -> qftUnbox n x

-- qft2Box_t1 = qft2Box (five + five)
 

-- little-headian QFT: the lowest-order bit is at the head of the list->
qft_little_headian : ! (n : Nat) -> Vec Qubit n -> Vec Qubit n
qft_little_headian n l = reverse_vec (qft l)


qft_little_headian_Box : ! (n : Nat) -> Circ(Vec Qubit n, Vec Qubit n)
qft_little_headian_Box n = box (Vec Qubit n) $ \ x -> qft_little_headian n x

-- qft_little_headian_Box_t1 = qft_little_headian_Box seven

qft_little_headian_rev : ! (n : Nat) -> Vec Qubit n -> Vec Qubit n
qft_little_headian_rev n =
  unbox $ reverse $ qft_little_headian_Box n
  -- (box Vec Qubit n : qft_little_headian n)

qft_little_headian_rev_B : ! (n : Nat) -> Circ(Vec Qubit n, Vec Qubit n)
qft_little_headian_rev_B n = reverse $ qft_little_headian_Box n

-- qft_little_headian_rev_B_t1 = qft_little_headian_rev_B eight

-- $ box Vec Qubit n :  qft_little_headian n

-- qft_little_headian_rev : ! (n : Nat) -> Vec Qubit n -> Vec Qubit n
-- qft_little_headian_rev n = unbox qft_little_headian_rev_B n

-- q2 : Qubit
-- q2 = Init0

-- f : ! (Bool -> Bool)
-- f x = let a = Term0 q2 in x



qft4_little : Circ(Vec Qubit four, Vec Qubit four) 
qft4_little = qft_little_headian_Box four

qft4_little_rev : Circ(Vec Qubit four, Vec Qubit four)
qft4_little_rev = reverse qft4_little

qft_both : ! (n : Nat) -> Vec Qubit n -> Vec Qubit n
qft_both n l = qft_little_headian_rev n $ qft_little_headian n l

qft_both_Box : ! (n : Nat) -> Circ(Vec Qubit n, Vec Qubit n)
qft_both_Box n = boxCirc $ \ x -> qft_both n x

qft_both_Box_ctrl : ! (n : Nat) -> Circ(Vec Qubit n * Vec Qubit n, Vec Qubit n * Vec Qubit n)
qft_both_Box_ctrl n = box (Vec Qubit n * Vec Qubit n) $ \ i ->
                        let (inputs, c) = i in controlled (qft_both_Box n) inputs c
                       

-- main : Circ(Vec Qubit 9, Vec Qubit 9)
-- main = qft_both_Box 9
main2 = qft_both_Box_ctrl nine
main = qftBox nine


-- t : ! (Circ(Qubit, Qubit) -> Circ(Qubit, Qubit))
-- t x = x

-- testHa = withBasisChange ha ss

-- test2 = boxCirc $ \ x -> tele (unbox testHa x)

